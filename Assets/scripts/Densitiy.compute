// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> map;
StructuredBuffer<float3> normals;
float th;
int resolution;
int offsetmult;

float DAngle(float3 normal)
{
    float angle = acos(normal[1]);
    return angle;
}

[numthreads(8,8,1)]
void Distribution (uint3 id : SV_DispatchThreadID)
{
    if (DAngle(normals[id.x + id.y * resolution]) < th)
        map[id.xy] = float4(0, 0, 1, 0);
    else
        map[id.xy] = float4(0, 0, 0, 0);;
}

[numthreads(8, 8, 1)]
void JFA(uint3 id : SV_DispatchThreadID)
{
    float PixelSize = 1 / (float) resolution;
    float2 offsets[8] =
    {
        float2(-1.0f, -1.0f),
        float2(1.0f, 1.0f),
        float2(1.0f, 0.0f),
        float2(0.0f, 1.0f),
        float2(-1.0f, 0.0f),
        float2(0.0f, -1.0f),
        float2(-1.0f, 1.0f),
        float2(1.0f, -1.0f)
    };
    
    
}
